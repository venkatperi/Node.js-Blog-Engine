var mysql = require( 'mysql' ),
    Sequelize = require( "sequelize" ),
    db = {},
    sequelize;
var Q = require( 'q' );
var _ = require( 'underscore' );
var pCall = require( './pcall' );

sequelize = new Sequelize( process.env.database, process.env.user, process.env.password, {
  host : process.env.host,
  port : process.env.dbPort,
  dialect : require( 'sequelize-dialect-akiban' )
} );

var User = sequelize.define( 'User', {
  name : 'VARCHAR(255)'
}, {a : "bcd"} );

/**
 * provider {String}
 * The provider which with the user authenticated (facebook, twitter, etc.).
 * id {String}
 * A unique identifier for the user, as generated by the service provider.
 * displayName {String}
 * The name of this user, suitable for display.
 * name {Object}
 * familyName {String}
 * The family name of this user, or "last name" in most Western languages.
 * givenName {String}
 * The given name of this user, or "first name" in most Western languages.
 * middleName {String}
 * The middle name of this user.
 * emails {Array} [n]
 * value {String}
 * The actual email address.
 * type {String}
 * The type of email address (home, work, etc.).
 */

var UserProfile = sequelize.define( 'UserProfile', {
  provider : { type : 'VARCHAR(255)', allowNull : true},
  identifier : 'VARCHAR(255)',
  displayName : 'VARCHAR(255)'
} );

var UserName = sequelize.define( 'UserName', {
  familyName : { type : 'VARCHAR(255)', allowNull : true},
  middleName : { type : 'VARCHAR(255)', allowNull : true},
  givenName : { type : 'VARCHAR(255)', allowNull : true}
} );

var UserEmail = sequelize.define( 'UserEmail', {
  value : 'VARCHAR(255)',
  type : { type : 'VARCHAR(255)', allowNull : true}
} );

User.hasMany( UserProfile, {as : 'Profiles'} );
UserProfile.belongsTo( User );
UserProfile.hasOne( UserName, {as : 'Name', foreignKey : '_username_id'} );
UserName.belongsTo( UserProfile );
UserProfile.hasMany( UserEmail, {as : 'Emails'} );
UserEmail.belongsTo( UserProfile );

var Blog = sequelize.define( 'Blog', {
  title : 'VARCHAR(255)',
  subtitle : { type : 'VARCHAR(1000)', allowNull : true},
  archived : { type : Sequelize.BOOLEAN, allowNull : false, defaultValue : false},
  authProvider : 'VARCHAR(255)'
} );

var Post = sequelize.define( 'Post', {
  title : 'VARCHAR(255)',
  content : 'VARCHAR(5000)',
  status : 'VARCHAR(255)'//currently either 'published' or 'draft'
} );

User.hasMany( Post, {as : "Posts"} );
Post.belongsTo( User );

Post.hasMany( Post, { as : 'Children', foreignKey : 'parentId', useJunctionTable : false } );
Post.belongsTo( Blog );
Blog.hasMany( Post, {as : "Posts"} );

var dropTables = true;

var tables = [User, UserName, UserEmail, UserProfile, Blog, Post];
db = {
  User : User,
  UserName : UserName,
  UserEmail : UserEmail,
  UserProfile : UserProfile,
  Blog : Blog,
  Post : Post
};

tables.reduce( function ( soFar, x ) {
  return soFar.then( function () {
    return pCall( x.sync, x, {force : dropTables} );
  } );
}, Q() );

module.exports = db;